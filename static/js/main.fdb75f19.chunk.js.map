{"version":3,"sources":["Counter/Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Counter","state","counterValue","inputValue","addToCounter","setState","substractToCounter","data-testid","className","this","onClick","type","value","onChange","e","parseInt","target","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAyDeA,E,4MArDbC,MAAQ,CACNC,aAAc,EACdC,WAAY,G,EAGdC,aAAe,WACb,EAAKC,SAAS,CACZH,aAAc,EAAKD,MAAME,WAAa,EAAKF,MAAMC,gB,EAIrDI,mBAAqB,WACnB,EAAKD,SAAS,CACZH,aAAc,EAAKD,MAAMC,aAAe,EAAKD,MAAME,c,4CAIvD,WAAU,IAAD,OACP,OACE,gCACE,oBAAII,cAAY,SAAhB,wBACA,oBACEA,cAAY,UACZC,UACEC,KAAKR,MAAMC,cAAgB,IACvB,QACAO,KAAKR,MAAMC,eAAiB,IAC5B,MACA,GAPR,SAUGO,KAAKR,MAAMC,eAEd,wBAAQK,cAAY,eAAeG,QAASD,KAAKH,mBAAjD,eAGA,uBACEC,cAAY,QACZI,KAAK,SACLC,MAAOH,KAAKR,MAAME,WAClBK,UAAU,iBACVK,SAAU,SAACC,GAAD,OACR,EAAKT,SAAS,CAAEF,WAAYY,SAASD,EAAEE,OAAOJ,YAGlD,wBAAQL,cAAY,UAAUG,QAASD,KAAKL,aAA5C,sB,GA9Cca,aCSPC,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCKSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fdb75f19.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Counter.css\";\n\nclass Counter extends Component {\n  state = {\n    counterValue: 0,\n    inputValue: 1,\n  };\n\n  addToCounter = () => {\n    this.setState({\n      counterValue: this.state.inputValue + this.state.counterValue,\n    });\n  };\n\n  substractToCounter = () => {\n    this.setState({\n      counterValue: this.state.counterValue - this.state.inputValue,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"header\">My Counter</h1>\n        <h3\n          data-testid=\"counter\"\n          className={\n            this.state.counterValue >= 100\n              ? \"green\"\n              : this.state.counterValue <= -100\n              ? \"red\"\n              : \"\"\n          }\n        >\n          {this.state.counterValue}\n        </h3>\n        <button data-testid=\"subtract-btn\" onClick={this.substractToCounter}>\n          -\n        </button>\n        <input\n          data-testid=\"input\"\n          type=\"number\"\n          value={this.state.inputValue}\n          className=\"Counter__input\"\n          onChange={(e) =>\n            this.setState({ inputValue: parseInt(e.target.value) })\n          }\n        />\n        <button data-testid=\"add-btn\" onClick={this.addToCounter}>\n          +\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import \"./App.css\";\n\nimport Counter from \"./Counter/Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}